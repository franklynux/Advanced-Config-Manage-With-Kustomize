version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      # Install kubectl
      - curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      
      # Install aws-iam-authenticator
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      - chmod +x aws-iam-authenticator
      - mv aws-iam-authenticator /usr/local/bin/
      
      # Install Kustomize
      - curl -LO "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.2/kustomize_v5.4.2_linux_amd64.tar.gz"
      - tar -xzf kustomize_v5.4.2_linux_amd64.tar.gz
      - chmod +x kustomize
      - mv kustomize /usr/local/bin/
      
      # Verify installations
      - kubectl version --client=true --short=true
      - aws-iam-authenticator version
      - kustomize version

  pre_build:
    commands:
      # Verify AWS credentials and get cluster credentials
      - aws sts get-caller-identity
      - aws eks update-kubeconfig --region us-east-1 --name kustomize-app-cluster
      
      # Verify cluster access
      - kubectl get ns || { echo "ERROR: Cluster access failed"; exit 1; }

  build:
    commands:
      # Build Kustomize overlay
      - cd overlays/dev  # Change to dev, staging, or prod as needed
      - kustomize build . > output.yaml
      - cat output.yaml  # Verify the output
      - ls -la

  post_build:
    commands:
      # Deploy to EKS
      - kubectl apply -f output.yaml --dry-run=client  # Validate first
      - kubectl apply -f output.yaml
      - kubectl get pods -n default  # Verify deployment (adjust namespace if needed)

artifacts:
  files:
    - overlays/dev/output.yaml  # This will be available for subsequent stages
  discard-paths: no
